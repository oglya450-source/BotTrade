import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class MiniAppManager:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        self.web_app_url = "https://yourdomain.com/mini_app/index.html"
    
    async def start_with_webapp(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App"""
        try:
            user = update.effective_user
            username = f"@{user.username}" if user.username else user.first_name
            
            keyboard = [
                [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å Trading App", web_app={"url": self.web_app_url})]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üì± *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!*\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error in start_with_webapp: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

    async def handle_webapp_data(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
        try:
            if not update.message or not update.message.web_app_data:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp")
                return
            
            data = json.loads(update.message.web_app_data.data)
            user_id = update.effective_user.id
            
            logger.info(f"Received WebApp data from user {user_id}: {data}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App
            action_type = data.get('type', 'unknown')
            
            if action_type == 'trade':
                await self.process_trade(user_id, data)
            elif action_type == 'get_balance':
                await self.send_balance(user_id, update)
            elif action_type == 'get_portfolio':
                await self.send_portfolio(user_id, update)
            else:
                logger.warning(f"Unknown WebApp action type: {action_type}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞")
            
            await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except json.JSONDecodeError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"Error processing webapp data: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

    async def process_trade(self, user_id: int, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ Mini App"""
        try:
            symbol = data.get('symbol', 'BTC/USDT')
            side = data.get('side', 'buy')
            amount = float(data.get('amount', 0))
            
            logger.info(f"Processing trade: User {user_id} {side} {amount} {symbol}")
            
            # –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –∏–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏
            if amount <= 0:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
                
            # –í–∞—à–∞ —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–¥–µ—Å—å
            
        except ValueError as e:
            logger.error(f"Trade validation error: {e}")
            raise
        except Exception as e:
            logger.error(f"Trade processing error: {e}")
            raise

    async def send_balance(self, user_id: int, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ó–¥–µ—Å—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
            # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É
            
            balance_data = {
                'total': 5247.89,
                'available': 1245.75,
                'locked': 0.0,
                'currencies': [
                    {'symbol': 'USDT', 'amount': 1245.75, 'value': 1245.75},
                    {'symbol': 'BTC', 'amount': 0.1254, 'value': 8245.67},
                    {'symbol': 'ETH', 'amount': 5.21, 'value': 18542.10}
                ]
            }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                "üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n\n"
                f"‚Ä¢ –û–±—â–∏–π: ${balance_data['total']:,.2f}\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: ${balance_data['available']:,.2f}\n"
                f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${balance_data['locked']:,.2f}\n\n"
                "üìä *–ê–∫—Ç–∏–≤—ã:*\n"
            )
            
            for currency in balance_data['currencies']:
                message += f"‚Ä¢ {currency['symbol']}: {currency['amount']} (${currency['value']:,.2f})\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error sending balance: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

    async def send_portfolio(self, user_id: int, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
        try:
            # –ó–¥–µ—Å—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–∑ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
            portfolio_data = {
                'total_value': 28733.52,
                'daily_change': +2.3,
                'assets': [
                    {'symbol': 'BTC', 'amount': 0.1254, 'value': 8245.67, 'percent': 28.7},
                    {'symbol': 'ETH', 'amount': 5.21, 'value': 18542.10, 'percent': 64.5},
                    {'symbol': 'USDT', 'amount': 1245.75, 'value': 1245.75, 'percent': 4.3}
                ]
            }
            
            message = (
                "üìà *–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:*\n\n"
                f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${portfolio_data['total_value']:,.2f}\n"
                f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {portfolio_data['daily_change']:+.1f}%\n\n"
                "üìã *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:*\n"
            )
            
            for asset in portfolio_data['assets']:
                change_emoji = "üìà" if asset['percent'] > 5 else "üìä"
                message += f"‚Ä¢ {asset['symbol']}: {asset['amount']} (${asset['value']:,.2f}) {change_emoji}\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error sending portfolio: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è")

async def test_mini_app(update: Update, context: CallbackContext):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Mini App"""
    try:
        await update.message.reply_text(
            "‚úÖ *Mini App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞!*\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /app - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ /balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
            "‚Ä¢ /portfolio - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å\n\n"
            "‚ö° *–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç:*\n"
            "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Test command error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã")

async def quick_balance(update: Update, context: CallbackContext):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É
        balance_info = (
            "üí∞ *–ë–∞–ª–∞–Ω—Å:* $5,247.89\n"
            "üíµ *–î–æ—Å—Ç—É–ø–Ω–æ:* $1,245.75\n"
            "üîí *–í –æ—Ä–¥–µ—Ä–∞—Ö:* $4,002.14\n\n"
            "üìä *–ê–∫—Ç–∏–≤—ã:*\n"
            "‚Ä¢ BTC: 0.1254 ($8,245.67)\n"
            "‚Ä¢ ETH: 5.21 ($18,542.10)\n"
            "‚Ä¢ USDT: 1,245.75 ($1,245.75)"
        )
        
        await update.message.reply_text(balance_info, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Quick balance error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

def setup_mini_app_handlers(application: Application):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è Mini App"""
    try:
        mini_app_manager = MiniAppManager(application.bot.token)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("app", mini_app_manager.start_with_webapp))
        application.add_handler(CommandHandler("test_app", test_mini_app))
        application.add_handler(CommandHandler("balance", quick_balance))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
        async def safe_webapp_handler(update: Update, context: CallbackContext):
            try:
                return await mini_app_manager.handle_webapp_data(update, context)
            except Exception as e:
                logger.error(f"WebApp handler error: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebApp –¥–∞–Ω–Ω—ã—Ö
        application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, safe_webapp_handler))
        
        logger.info("‚úÖ Mini App handlers registered successfully")
        
    except Exception as e:
        logger.error(f"Failed to setup Mini App handlers: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Mini App
def is_mini_app_available():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –º–æ–¥—É–ª—å Mini App"""
    try:
        from mini_app.config import setup_mini_app_handlers
        return True
    except ImportError:
        return False